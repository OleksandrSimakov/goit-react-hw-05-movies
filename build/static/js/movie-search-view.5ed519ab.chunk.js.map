{"version":3,"sources":["views/MovieSearchView.js"],"names":["MovieSearchView","useState","query","setQuery","movies","setMovies","history","useHistory","storageQuery","JSON","parse","localStorage","getItem","useEffect","moviesApi","then","result","catch","error","console","log","onSubmit","e","input","target","elements","value","preventDefault","setItem","stringify","push","window","location","pathname","type","autoComplete","autoFocus","placeholder","map","movie","title","to","id","state","params"],"mappings":"gNAIe,SAASA,IAAmB,IAAD,EACdC,mBAAS,IADK,mBACjCC,EADiC,KAC1BC,EAD0B,OAEZF,mBAAS,IAFG,mBAEjCG,EAFiC,KAEzBC,EAFyB,KAGlCC,EAAUC,cAUVC,EAAeC,KAAKC,MAAMC,aAAaC,QAAQ,UAsBrD,OApBAC,qBAAU,YACHL,GAA0B,KAAVN,KAETA,EAQVY,IACkBZ,GACfa,MAAK,SAACC,GACLX,EAAUW,MAEXC,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,MAZhCJ,IACkBN,GACfO,MAAK,SAACC,GACLX,EAAUW,MAEXC,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,SASjC,CAAChB,EAAOM,IAGT,qCACE,uBAAMa,SAhCW,SAACC,GACpB,IAAMC,EAAQD,EAAEE,OAAOC,SAAS,GAAGC,MACnCJ,EAAEK,iBACFxB,EAASmB,EAAEE,OAAOC,SAAS,GAAGC,OAC9Bf,aAAaiB,QAAQ,QAASnB,KAAKoB,UAAUN,IAC7CjB,EAAQwB,KAAR,UAAgBC,OAAOC,SAASC,SAAhC,kBAAkDV,KA2BhD,UACE,gCACE,uBACEW,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,oBAGhB,wBAAQH,KAAK,SAAb,uBAGD9B,GACC,6BACGA,EAAOkC,KACN,SAACC,GAAD,OACEA,EAAMC,OACJ,6BACE,cAAC,IAAD,CACEC,GAAI,CACFR,SAAS,UAAD,OAAYM,EAAMG,IAC1BC,MAAO,CACLC,OAAO,GAAD,OAAKb,OAAOC,SAASC,SAArB,kBAAuC/B,KAJnD,SAQGqC,EAAMC,SATFD,EAAMG","file":"static/js/movie-search-view.5ed519ab.chunk.js","sourcesContent":["import { useState, useEffect } from 'react'\nimport * as moviesApi from '../services/movies-api'\nimport { Link, useHistory } from 'react-router-dom'\n\nexport default function MovieSearchView() {\n  const [query, setQuery] = useState('')\n  const [movies, setMovies] = useState([])\n  const history = useHistory()\n\n  const handleSearch = (e) => {\n    const input = e.target.elements[0].value\n    e.preventDefault()\n    setQuery(e.target.elements[0].value)\n    localStorage.setItem('query', JSON.stringify(input))\n    history.push(`${window.location.pathname}?query=${input}`)\n  }\n\n  const storageQuery = JSON.parse(localStorage.getItem('query'))\n\n  useEffect(() => {\n    if (!storageQuery && query === '') {\n      return\n    } else if (!query) {\n      moviesApi\n        .fetchByKeyword(storageQuery)\n        .then((result) => {\n          setMovies(result)\n        })\n        .catch((error) => console.log(error))\n    } else {\n      moviesApi\n        .fetchByKeyword(query)\n        .then((result) => {\n          setMovies(result)\n        })\n        .catch((error) => console.log(error))\n    }\n  }, [query, storageQuery])\n\n  return (\n    <>\n      <form onSubmit={handleSearch}>\n        <label>\n          <input\n            type=\"text\"\n            autoComplete=\"off\"\n            autoFocus\n            placeholder=\"Search movies\"\n          />\n        </label>\n        <button type=\"submit\">Search</button>\n      </form>\n\n      {movies && (\n        <ul>\n          {movies.map(\n            (movie) =>\n              movie.title && (\n                <li key={movie.id}>\n                  <Link\n                    to={{\n                      pathname: `movies/${movie.id}`,\n                      state: {\n                        params: `${window.location.pathname}?query=${query}`,\n                      },\n                    }}\n                  >\n                    {movie.title}\n                  </Link>\n                </li>\n              ),\n          )}\n        </ul>\n      )}\n    </>\n  )\n}\n"],"sourceRoot":""}