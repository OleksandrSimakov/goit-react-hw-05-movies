{"version":3,"sources":["views/MovieView.module.css","views/MovieView.js"],"names":["module","exports","MovieReviewView","lazy","MovieCastView","MovieDetailsPage","movieId","useParams","useRouteMatch","url","path","location","useLocation","history","useHistory","routerState","useRef","useEffect","current","state","useState","movie","setMovie","casts","setCasts","reviews","setReviews","moviesApi","then","type","onClick","params","push","className","css","card","image","src","poster_path","alt","title","description","release_date","substr","Number","vote_average","overview","genres","map","genre","list","name","reviewList","to","fallback"],"mappings":"oGACAA,EAAOC,QAAU,CAAC,KAAO,wBAAwB,MAAQ,yBAAyB,YAAc,+BAA+B,OAAS,0BAA0B,KAAO,wBAAwB,WAAa,gC,gJCWxMC,EAAkBC,gBAAK,kBAC3B,gCAEIC,EAAgBD,gBAAK,kBACzB,gCAGa,SAASE,IAAoB,IAClCC,EAAYC,cAAZD,QADiC,EAEnBE,cAAdC,EAFiC,EAEjCA,IAAKC,EAF4B,EAE5BA,KACPC,EAAWC,cACXC,EAAUC,cACVC,EAAcC,iBAAO,MAE3BC,qBAAU,WACHF,EAAYG,UACfH,EAAYG,QAAUP,EAASQ,SAEhC,CAACR,EAASQ,QAX4B,MAafC,mBAAS,MAbM,mBAalCC,EAbkC,KAa3BC,EAb2B,OAcfF,mBAAS,MAdM,mBAclCG,EAdkC,KAc3BC,EAd2B,OAeXJ,mBAAS,MAfE,mBAelCK,EAfkC,KAezBC,EAfyB,KAiBzCT,qBAAU,WACRU,IAAuBrB,GAASsB,KAAKN,GACrCK,IAAoBrB,GAASsB,KAAKJ,GAClCG,IAAuBrB,GAASsB,KAAKF,KACpC,CAACpB,IAOJ,OACE,qCACE,wBAAQuB,KAAK,SAASC,QAPT,WACf,IAAMrB,EAAMM,EAAYG,QAAZ,UAAyBH,EAAYG,QAAQa,QAAW,IACpElB,EAAQmB,KAAKvB,IAKX,4BAGCY,GACC,sBAAKY,UAAWC,IAAIC,KAApB,UACE,qBAAKF,UAAWC,IAAIE,MAApB,SACE,qBACEC,IAAG,0CAAqChB,EAAMiB,aAC9CC,IAAKlB,EAAMmB,UAIf,sBAAKP,UAAWC,IAAIO,YAApB,UACE,uCAAQpB,EAAMmB,MAAd,aAAwBnB,EAAMqB,aAAaC,OAAO,EAAG,GAArD,OACA,6CAAgBC,OAA4B,GAArBvB,EAAMwB,cAA7B,QAEA,0CACA,4BAAIxB,EAAMyB,WAEV,wCACA,oBAAIb,UAAWC,IAAIa,OAAnB,SACG1B,EAAM0B,OAAOC,KAAI,SAACC,GAAD,OAChB,oBAAIhB,UAAWC,IAAIgB,KAAnB,SACGD,EAAME,MADqBF,EAAME,iBAS9C,uBACA,gCACE,uDACA,qBAAIlB,UAAWC,IAAIkB,WAAnB,UACE,6BACE,cAAC,IAAD,CAASC,GAAE,UAAK5C,EAAL,SAAX,oBAEF,6BACE,cAAC,IAAD,CAAS4C,GAAE,UAAK5C,EAAL,YAAX,6BAIN,uBACA,eAAC,WAAD,CAAU6C,SAAU,sIAApB,UACE,cAAC,IAAD,CAAO5C,KAAI,UAAKA,EAAL,SAAX,SACGa,GAAS,cAACnB,EAAD,CAAemB,MAAOA,MAGlC,cAAC,IAAD,CAAOb,KAAI,UAAKA,EAAL,YAAX,SACGe,GAAW,cAACvB,EAAD,CAAiBuB,QAASA","file":"static/js/movie-view.19bef254.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"MovieView_card__3ESiw\",\"image\":\"MovieView_image__YzJxP\",\"description\":\"MovieView_description__3yD7f\",\"genres\":\"MovieView_genres__2ICCB\",\"list\":\"MovieView_list__1qyxz\",\"reviewList\":\"MovieView_reviewList__1_3Cy\"};","import { useState, useEffect, useRef, lazy, Suspense } from 'react'\nimport {\n  useParams,\n  Route,\n  NavLink,\n  useLocation,\n  useHistory,\n} from 'react-router-dom'\nimport { useRouteMatch } from 'react-router'\nimport * as moviesApi from '../services/movies-api'\nimport css from '../views/MovieView.module.css'\n\nconst MovieReviewView = lazy(() =>\n  import('./MovieReviewView' /* webpackChunkName: \"movie-review-view\" */),\n)\nconst MovieCastView = lazy(() =>\n  import('./MovieCastView' /* webpackChunkName: \"movie-cast-view\" */),\n)\n\nexport default function MovieDetailsPage() {\n  const { movieId } = useParams()\n  const { url, path } = useRouteMatch()\n  const location = useLocation()\n  const history = useHistory()\n  const routerState = useRef(null)\n\n  useEffect(() => {\n    if (!routerState.current) {\n      routerState.current = location.state\n    }\n  }, [location.state])\n\n  const [movie, setMovie] = useState(null)\n  const [casts, setCasts] = useState(null)\n  const [reviews, setReviews] = useState(null)\n\n  useEffect(() => {\n    moviesApi.fetchDetails(movieId).then(setMovie)\n    moviesApi.fetchCast(movieId).then(setCasts)\n    moviesApi.fetchReviews(movieId).then(setReviews)\n  }, [movieId])\n\n  const onGoBack = () => {\n    const url = routerState.current ? `${routerState.current.params}` : '/'\n    history.push(url)\n  }\n\n  return (\n    <>\n      <button type=\"button\" onClick={onGoBack}>\n        ← Go back\n      </button>\n      {movie && (\n        <div className={css.card}>\n          <div className={css.image}>\n            <img\n              src={`https://image.tmdb.org/t/p/w400/${movie.poster_path}`}\n              alt={movie.title}\n            />\n          </div>\n\n          <div className={css.description}>\n            <h2>{`${movie.title} (${movie.release_date.substr(0, 4)})`}</h2>\n            <p>User score: {Number(movie.vote_average * 10)} %</p>\n\n            <h3>Overview</h3>\n            <p>{movie.overview}</p>\n\n            <h4>Genres</h4>\n            <ul className={css.genres}>\n              {movie.genres.map((genre) => (\n                <li className={css.list} key={genre.name}>\n                  {genre.name}\n                </li>\n              ))}\n            </ul>\n          </div>\n        </div>\n      )}\n\n      <hr />\n      <div>\n        <p>Additional information</p>\n        <ul className={css.reviewList}>\n          <li>\n            <NavLink to={`${url}/cast`}>Cast</NavLink>\n          </li>\n          <li>\n            <NavLink to={`${url}/reviews`}>Reviews</NavLink>\n          </li>\n        </ul>\n      </div>\n      <hr />\n      <Suspense fallback={<h1>ЗАГРУЖАЕМ МАРШРУТ...</h1>}>\n        <Route path={`${path}/cast`}>\n          {casts && <MovieCastView casts={casts} />}\n        </Route>\n\n        <Route path={`${path}/reviews`}>\n          {reviews && <MovieReviewView reviews={reviews} />}\n        </Route>\n      </Suspense>\n    </>\n  )\n}\n"],"sourceRoot":""}